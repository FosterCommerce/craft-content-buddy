$(document).ready(function () {
    let working = '{{ 'Working...'|t('convergine-contentbuddy') }}';
    let selectPromptText = '{{ 'selectPromptText'|t('convergine-contentbuddy') }}';

    $('body').on('click', '.buddy-menu a', function (clickEvent) {
        clickEvent.stopPropagation();
        clickEvent.preventDefault();

        let $this = $(this);
        let hash = $this.attr('data-hash');
        let $button = $('button[data-hash="' + hash + '"]');
        let $input = $button.closest('.input').find('input, textarea').first();

        let disclosureMenu = $button.data('disclosureMenu');
        if(disclosureMenu) {
            disclosureMenu.hide();
        } else {
            let $menu = $('#' + $button.attr('aria-controls'));
            if($menu.length) {
                $menu.hide();
            }
        }

        let fieldType = $button.closest('.field').attr('data-type');
        let query = getInputSelection(fieldType, $input);
        if(!checkInputText(query)) {
            return;
        }
        setInputSelection(fieldType, $input, query, working);

        let text = $input.val();
        let prompt = $this.attr('data-prompt');
        let lang = $this.attr('data-lang');
        sendRequest(prompt, query, $input, hash,text,lang);
    });

    function checkInputText(query) {
        if(query.length < 3) {
            alert(selectPromptText);
            return false;
        }
        return true;
    }

    function getInputSelection(fieldType, $input) {
        let query = '';
        let text = $input.val();
        if(fieldType === 'craft\\redactor\\Field') {
            let textareaId = $input.attr('id');
            query = $R('#' + textareaId).selection.getHtml();
        } else if(fieldType === 'craft\\ckeditor\\Field') {
            //query = CKEditor5.utils.getDataFromElement($input[0]);
            let $ckElement = $input.next().find('.ck-editor__editable');
            if($ckElement.length) {
                let selection = $ckElement[0].ckeditorInstance.model.document.selection.getFirstRange().getItems();
                for(let item of selection) {
                    query = item.data;
                }
            }
        } else if(typeof $input !== "undefined") {
            let s = $input[0].selectionStart;
            let e = $input[0].selectionEnd;
            let selectedText = $input.val().substring(s, e);
            return selectedText?selectedText:text;
        } else {
            return '';
        }
        if(!query) {
            query = text
        }
        console.log('query',query);
        return query;
    }

    function setInputSelection(fieldType, $input, old_text, new_text) {
        let text = $input.val();
        let value = text.replace(old_text, new_text);
        if(fieldType === 'craft\\redactor\\Field') {
            let textareaId = $input.attr('id');
            $R('#' + textareaId, 'source.setCode', value);
        } else if(fieldType === 'craft\\ckeditor\\Field') {
            //CKEditor5.utils.setDataInElement(input[0], text.replace(query, working));
            let $ckElement = $input.next().find('.ck-editor__editable');
            if($ckElement.length) {
                $ckElement[0].ckeditorInstance.setData(value);
            }
        } else {
            $input.val(value);
        }
    }

    function sendRequest(prompt, query, textField, hash, text, lang) {
        let sendData = {
            "prompt": prompt,
            "query": query,
            "lang": lang,
            [Craft.csrfTokenName]: Craft.csrfTokenValue
        };

        $.ajax({
            type: "POST",
            url: "{{ actionUrl('convergine-contentbuddy/prompt-processor/process') }}",
            data: sendData,
            success: function (data) {
                let fieldType = $('button[data-hash="' + hash + '"]').closest('.field').attr('data-type');
                if(data.res) {
                    let result = data.result.replaceText == 1 ? data.result.response : query + ' ' + data.result.response;
                    setInputSelection(fieldType, textField, working, result);
                } else {
                    setInputSelection(fieldType, textField, working, query);
                    let errorMessages = (data.msg).replaceAll('<br>','\n');
                    alert(errorMessages);
                }
            },
            dataType: "json"
        }).fail(function (data) {
            result = text.replace(working, query);
            alert(data.responseJSON.error.message.replace('<br>','\n'));
            let fieldType = $('button[data-hash="' + hash + '"]').closest('.field').attr('data-type');
            setInputSelection(fieldType, textField, working, query);
        });
    }

    let hud = null;

    $('body').on('click', '.cb-btn-generate-entries', function() {
        if($(this).find('.cb-text').hasClass('disabled')) {
            return;
        }

        let $btn = $(this);

        let id = $btn.attr('data-id');
        let type = $btn.attr('data-type');
        let handle = $btn.attr('data-handle');
        let name = $btn.attr('data-name');

        if(hud) {
            hud.destroy();
            hud = null;
            return;
        }

        const hudContent = document.createElement('div');
        hudContent.innerHTML = `
          <form id="hudAmountForm">
            <label for="hudAmountInput">Amount of entries:</label>
            <input type="number" id="hudAmountInput" name="number" class="text fullwidth mt-s" value="1" />
            <div class="buttons right mt-m">
              <button type="submit" class="btn submit">Generate</button>
            </div>
          </form>
        `;
        hudContent.style.maxWidth = '200px';

        hud = new Garnish.HUD($btn[0], hudContent, {
            onHide: () => (hud = null)
        });

        let form = hudContent.querySelector('#hudAmountForm');
        let input = form.querySelector('#hudAmountInput');
        input.focus();
        input.type = 'text';
        input.setSelectionRange(input.value.length, input.value.length);
        input.type = 'number';

        form.addEventListener('submit', (e) => {
            e.preventDefault();

            let $text = $btn.find('.cb-text');
            $text.text(working).attr('disabled', true).addClass('disabled');

            let amount = input.value;

            $.ajax({
                type: "POST",
                url: "{{ actionUrl('convergine-contentbuddy/prompt-processor/generate') }}",
                data: {
                    "id": id,
                    "type": type,
                    "handle": handle,
                    "name": name,
                    "amount": amount,
                    [Craft.csrfTokenName]: Craft.csrfTokenValue
                },
                success: function (data) {
                    console.log(data);
                    if(data.res) {
                        $text.text('Generate').attr('disabled', false).removeClass('disabled');
                        window.location.reload();
                    }
                },
                dataType: "json"
            }).fail(function (data) {
                console.log(data);
            });

            hud.hide();
        });
    });
});
